name: Deploy to IBM Cloud And Execute Enrichment Tests

on:
#  release:
#    types: [created]
  pull_request:
    branches: [ main ]

# Environment variables available to all jobs and steps in this workflow
env:
  GITHUB_SHA: ${{ github.sha }}
  IBM_CLOUD_API_KEY: ${{ secrets.IBM_CLOUD_API_KEY }}
  ACD_API_KEY: ${{ secrets.ACD_API_KEY }}
  DEFAULT_PASSWORD: ${{ secrets.DEFAULT_PASSWORD }}
  IBM_CLOUD_REGION: us-east
  CIS_INSTANCE: Cloud Internet Services - Health Patterns
  DOMAIN_ID: 6ff29db14b24b78a36227f49e18f3177
  POOL_ID: 64c39c1c0638d539cae6d5ff593a0493
  CLUSTER_NAMESPACE: git${{github.run_id}}
  FHIR_IP: ${CLUSTER_NAMESPACE}.wh-health-patterns.dev.watson-health.ibm.com/fhir
  FHIR_DEID_IP: ${CLUSTER_NAMESPACE}.wh-health-patterns.dev.watson-health.ibm.com/fhir-deid
  NIFI_IP: ${CLUSTER_NAMESPACE}.wh-health-patterns.dev.watson-health.ibm.com/
  DEID_IP: ${CLUSTER_NAMESPACE}.wh-health-patterns.dev.watson-health.ibm.com/deid
  EXP_KAFKA_IP: ${CLUSTER_NAMESPACE}.wh-health-patterns.dev.watson-health.ibm.com/expose-kafka
  ASCVD_FROM_FHIR_IP: ${CLUSTER_NAMESPACE}.wh-health-patterns.dev.watson-health.ibm.com/ascvd-from-fhir
  TERM_PREP_IP: ${CLUSTER_NAMESPACE}.wh-health-patterns.dev.watson-health.ibm.com/term-services-prep
  DEID_PREP_IP: ${CLUSTER_NAMESPACE}.wh-health-patterns.dev.watson-health.ibm.com/deid-prep
  NLP_INSIGHTS_IP: ${CLUSTER_NAMESPACE}.wh-health-patterns.dev.watson-health.ibm.com/nlp-insights
  KAFKA_TOPIC_IN: "ingest.clinical.in"
  HELM_TIMEOUT: "10m0s"
  
  

jobs:
  deploy:
    name: Deploy Health Patterns Chart to the IBM Cloud
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    # Download and Install IBM Cloud CLI
    - name: Install IBM Cloud CLI
      run: |
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud config --check-version=false
        ibmcloud plugin install -f kubernetes-service
        ibmcloud plugin install -f cis

    # Authenticate with IBM Cloud CLI
    - name: Authenticate into IBM Cloud Integration Squad Kubernetes Cluster
      run: |
        ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}" -g dev-env-wdc-kube
        ibmcloud ks cluster config --cluster health-patterns-1
        
    # Create the Namespace and Global Load Balancer 
    - name: Create Namespace and GLB
      run: |
        kubectl create namespace ${CLUSTER_NAMESPACE}
        ibmcloud cis glb-create ${DOMAIN_ID} --json '{"name" : "'${CLUSTER_NAMESPACE}'.wh-health-patterns.dev.watson-health.ibm.com", "fallback_pool" : "'${POOL_ID}'", "default_pools" : ["'${POOL_ID}'"], "ttl" : 1, "proxied" : true, "session_affinity" : "cookie"}' -i "${CIS_INSTANCE}"

    # Setup and Install NifiKop 
    - name: Install NifiKop
      run: |
        cd helm-charts/health-patterns

        # oidic users
        sed -i -e "s/name: \"alvearie\"/name: \"alvearie\"\n    - identity: \"roger.guderian@ibm.com\"\n      name: \"roger.guderian\"\n    - identity: \"atclark@us.ibm.com\"\n      name: \"adam.t.clark\"/g" values.yaml

        # oidc discovery URL
        sed -i -e "s/\&oidc_discovery_url \"replace-me\"/\&oidc_discovery_url \"https:\/\/us-east.appid.cloud.ibm.com\/oauth\/v4\/82343deb-31d3-4a15-9c30-469d12651b89\/.well-known\/openid-configuration\"/g" values.yaml

        #oidc client and secret
        sed -i -e "s/\&oidc_client_id replace-me/\&oidc_client_id 38c44769-91c3-4650-a8d5-b24f8992a821/g" values.yaml
        sed -i -e "s/\&oidc_client_secret replace-me/\&oidc_client_secret MmJjODZiNDUtNzdmYS00ZmJlLWFhNDYtZGFmMWFhMmI1MTI2/g" values.yaml

        # Enable NifiKop Deployment
        sed -i -e "s/\&nifikopDisabled true/\&nifikopDisabled false/g" values.yaml
        sed -i -e "s/\&nifikopEnabled false/\&nifikopEnabled true/g" values.yaml

        # Deploy NifiKop
        echo "Deploy NifiKop"
        helm repo add orange-incubator https://orange-kubernetes-charts-incubator.storage.googleapis.com/
        helm repo update 
        helm install nifikop orange-incubator/nifikop --namespace=$TEST_NAMESPACE --version 0.7.1 --set image.tag=v0.7.1-release --set resources.requests.memory=256Mi --set resources.requests.cpu=250m --set resources.limits.memory=256Mi --set resources.limits.cpu=250m --set namespaces={"$TEST_NAMESPACE"}  --wait --timeout $HELM_TIMEOUT


    # Setup and Install Ingestion Chart 
    - name: Install Ingestion Chart
      run: |
        pwd
        kubectl config current-context
        kubectl config set-context --current --namespace=${CLUSTER_NAMESPACE}
        helm dependency update helm-charts/health-patterns
        sed -i -e "s/\&hostname replace-me/\&hostname ${CLUSTER_NAMESPACE}.wh-health-patterns.dev.watson-health.ibm.com/g" helm-charts/health-patterns/values.yaml
        helm install ingestion helm-charts/health-patterns --set ascvd-from-fhir.ingress.enabled=true --set deid-prep.ingress.enabled=true --set term-services-prep.ingress.enabled=true --set nlp-insights.enabled=true --set nlp-insights.ingress.enabled=true --set nlp-insights.nlpservice.quickumls.endpoint=https://quickumls.wh-health-patterns.dev.watson-health.ibm.com/match --set nlp-insights.nlpservice.acd.endpoint=https://us-east.wh-acd.cloud.ibm.com/wh-acd/api --set nlp-insights.nlpservice.acd.apikey=$ACD_API_KEY --set nlp-insights.nlpservice.acd.flow=wh_acd.ibm_clinical_insights_v1.0_standard_flow --wait --timeout $HELM_TIMEOUT
        kubectl get all

    # Build Enrichment Tests 
    - name: Build Enrichment Tests
      run: |
         cd enrich
         echo "*************************************" 
         echo "* Build the testcases               *"
         echo "*************************************"
         mvn clean install --log-file ./mvn.log -Dip.fhir=$FHIR_IP -Dip.fhir.deid=$FHIR_DEID_IP -Dip.deid.prep=$DEID_PREP_IP -Dip.term.prep=$TERM_PREP_IP -Dip.ascvd.from.fhir=$ASCVD_FROM_FHIR_IP -Dip.nlp.insights=$NLP_INSIGHTS_IP -Dpw=$DEFAULT_PASSWORD
         echo "*************************************" 
         echo "* Properties File:                  *"
         echo "*************************************"
         cat src/test/resources/enrich-flow.properties
         
    # Execute Enrichment Tests 
    - name: Execute Enrichment Tests
      run: |
         cd enrich
         echo "*************************************"
         echo "* Waiting for 2 minutes             *"
         echo "*************************************"
         date
         sleep 120  
         date
         echo "*************************************" 
         echo "* Execute the testcases             *"
         echo "*************************************"
         mvn --log-file ./EnrichmentInitTests.log   -DskipTests=false -Dtest=EnrichmentInitTests test
         mvn --log-file ./BasicEnrichmentTests.log  -DskipTests=false -Dtest=BasicEnrichmentTests test
         mvn --log-file ./EnrichmentConfigTests.log -DskipTests=false -Dtest=EnrichmentConfigTests test
         mvn --log-file ./ASCVDEnrichmentTests.log  -DskipTests=false -Dtest=ASCVDEnrichmentTests test
         echo "*************************************" 
         echo "* Test Execution Summary            *"
         echo "*************************************"
         ls -lrt target/surefire-reports
         cat target/surefire-reports/*.txt
      
    # Build Ingestion Tests 
    - name: Build Ingestion Tests
      run: |
         cd ingest
         echo "*************************************" 
         echo "* Build the testcases               *"
         echo "*************************************"
         mvn clean install --log-file ./mvn.log -Dip.fhir=$FHIR_IP -Dip.fhir.deid=$FHIR_DEID_IP -Dip.nifi=$NIFI_IP -Dip.nifi.api=$NIFI_API_IP -Dip.kafka=$KAFKA_IP -Dip.deid=$DEID_IP -Dip.expkafka=$EXP_KAFKA_IP -Dkafka.topic.in=$KAFKA_TOPIC_IN -Dpw=$DEFAULT_PASSWORD
         echo "*************************************" 
         echo "* Properties File:                  *"
         echo "*************************************"
         cat src/test/resources/clinical-ingestion-flow.properties
         
    # Execute Ingestion Tests 
    - name: Execute Ingestion Tests
      run: |
         cd ingest
         echo "*************************************" 
         echo "* Execute the testcases             *"
         echo "*************************************"
         mvn  --log-file ./BasicIngestionInitTests.log -DskipTests=false -Dtest=BasicIngestionInitTests test
         mvn  --log-file ./BasicIngestionTests.log -DskipTests=false -Dtest=BasicIngestionTests test
         mvn  --log-file ./BasicIngestionBLKTests.log -DskipTests=false -Dtest=BasicIngestionBLKTests test
         echo "*************************************" 
         echo "* Test Execution Summary            *"
         echo "*************************************"
         ls -lrt target/surefire-reports
         cat target/surefire-reports/*.txt

    # Uninstall Ingestion Chart
    - name: Clean Up Ingestion Deployment
      run: helm uninstall ingestion
      continue-on-error: true
      if: ${{ always() }}

    # Delay for 30 seconds
    - name: Delay for 30 seconds
      run: sleep 30
      continue-on-error: true
      if: ${{ always() }}

    # Uninstall nifikop Chart
    - name: Clean Up NifiKop Deployment
      run: helm uninstall nifikop
      continue-on-error: true
      if: ${{ always() }}
   
    # Delay for 30 seconds, again
    - name: Another Delay for 30 seconds
      run: sleep 30
      continue-on-error: true
      if: ${{ always() }}
    
    # Delete Namespace
    - name: Delete Namespace
      run:  kubectl delete namespace ${CLUSTER_NAMESPACE}
      continue-on-error: true
      if: ${{ always() }}
                 
    # Delete GLB
    - name: Delete GLB
      run: |
           ibmcloud cis instance-set "${CIS_INSTANCE}"
           glbid=$(ibmcloud cis glbs 6ff29db14b24b78a36227f49e18f3177 | grep ${CLUSTER_NAMESPACE})
           glbid=${glbid:0:32}
           ibmcloud cis glb-delete ${DOMAIN_ID} $glbid -i "${CIS_INSTANCE}"
      continue-on-error: true
                 
      
      if: ${{ always() }}
