{{- if .Values.nifikop.enabled -}}
{{- if .Values.nifi2.enabled -}}
apiVersion: nifi.orange.com/v1alpha1
kind: NifiCluster
metadata:
  name: nifi
spec:
  service:
    headlessEnabled: true
  zkAddress: alvearie-zookeeper.{{ .Release.Namespace }}.svc.cluster.local:2181
  zkPath: "/nifi"
  clusterImage: {{ .Values.nifi2.image.repository }}:{{ .Values.nifi2.image.tag }}
  oneNifiNodePerNode: false
  managedAdminUsers:
{{- range $u := .Values.nifi2.user }}
  - identity: {{ $u.identity }}
    name: {{ $u.name }}
{{- end }}
  propagateLabels: true
  nifiClusterTaskSpec:
    retryDurationMinutes: 10
  readOnlyConfig:
    # NifiProperties configuration that will be applied to the node.
    nifiProperties:
      # Additionnals nifi.properties configuration that will override the one produced based
      # on template and configurations.
      overrideConfigs: |
        nifi.security.identity.mapping.pattern.dn=CN=([^,]*)(?:, (?:O|OU)=.*)?
        nifi.security.identity.mapping.transform.dn=NONE
        nifi.security.identity.mapping.value.dn=$1
        nifi.security.user.oidc.discovery.url={{ .Values.nifi2.oidc.discovery.url }}
        nifi.security.user.oidc.client.id={{ .Values.nifi2.oidc.client.id }}
        nifi.security.user.oidc.client.secret={{ .Values.nifi2.oidc.client.secret }}
        nifi.security.user.oidc.preferred.jwsalgorithm=RS256
        nifi.nar.library.autoload.directory=/opt/nifi/extensions
      webProxyHosts:
        - {{ .Values.nifi2.ingress.hostname }}
  nodeConfigGroups:
    default_group:
      isNode: true
      storageConfigs:
        - mountPath: "/opt/nifi/nifi-current/logs"
          name: logs
          pvcSpec:
            accessModes:
              - ReadWriteOnce
            storageClassName: {{ .Values.nifi2.storageClassName }}
            resources:
              requests:
                storage: 10Gi
        - mountPath: "/opt/nifi/data"
          name: data
          pvcSpec:
            accessModes:
              - ReadWriteOnce
            storageClassName: {{ .Values.nifi2.storageClassName }}
            resources:
              requests:
                storage: 10Gi
        - mountPath: "/opt/nifi/flowfile_repository"
          name: flowfile-repository
          pvcSpec:
            accessModes:
              - ReadWriteOnce
            storageClassName: {{ .Values.nifi2.storageClassName }}
            resources:
              requests:
                storage: 10Gi
        - mountPath: "/opt/nifi/nifi-current/conf"
          name: conf
          pvcSpec:
            accessModes:
              - ReadWriteOnce
            storageClassName: {{ .Values.nifi2.storageClassName }}
            resources:
              requests:
                storage: 10Gi
        - mountPath: "/opt/nifi/content_repository"
          name: content-repository
          pvcSpec:
            accessModes:
              - ReadWriteOnce
            storageClassName: {{ .Values.nifi2.storageClassName }}
            resources:
              requests:
                storage: 10Gi
        - mountPath: "/opt/nifi/provenance_repository"
          name: provenance-repository
          pvcSpec:
            accessModes:
              - ReadWriteOnce
            storageClassName: {{ .Values.nifi2.storageClassName }}
            resources:
              requests:
                storage: 10Gi
        - mountPath: /opt/nifi/extensions
          name: extensions
          pvcSpec:
            accessModes:
              - ReadWriteOnce
            resources:
              requests:
                storage: 10Gi
            storageClassName: {{ .Values.nifi2.storageClassName }}
      serviceAccountName: "default"
      resourcesRequirements:
        limits:
          cpu: "2"
          memory: 3Gi
        requests:
          cpu: "1"
          memory: 1Gi
  nodes:
    - id: 0
      nodeConfigGroup: "default_group"
  listenersConfig:
    internalListeners:
      - type: "https"
        name: "https"
        containerPort: {{ .Values.nifi2.service.port}}
      - type: "cluster"
        name: "cluster"
        containerPort: 6007
      - type: "s2s"
        name: "s2s"
        containerPort: 10000
    sslSecrets:
      tlsSecretName: "nifikop"
      create: true
  initContainers:
    # This init container will install the custom NiFi Processors (packed in the proper NAR format).
    # The NARs will be copied to a shared volume, and the customLibPath will be set to the location
    # of that shared volume in the main NiFi server container and set in nifi.properties
    - name: alvearie-nars-init
      image: alvearie/nars:0.0.4
      imagePullPolicy: Always
      command: ["sh", "-c", "cp *.nar /nars"]
      volumeMounts:
      - name: extensions
        mountPath: /nars
{{- end }}
{{- end }}