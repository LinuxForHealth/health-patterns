plugins {
    id "ru.vyarus.use-python" version "2.3.0"
    id "org.sonarqube" version "3.0"
    id "com.palantir.docker" version "0.27.0"
    id 'com.palantir.docker-run' version "0.27.0"
}

group = 'org.alvearie.health-patterns'
version = "1.0.0"
description = """NLP Insights"""

sonarqube {
    properties {
        property "sonar.sources", pySrcDir
        property "sonar.tests", pyTestDir
        property "sonar.python.coverage.reportPaths", pyXmlCoveragePath
        property "sonar.python.xunit.reportPath", pyTestReportPath
    }
}

// --------
//Python Build Section
python {
    //Python dependencies start
    pip 'ibm-whcs-sdk:1.9.0'
    pip 'ibm-cloud-sdk-core:3.8.0'
    pip 'fhir.resources:6.1.0'
    pip 'deepdiff:5.5.0'
    pip 'flask:2.0.1'
    pip 'jsonpath-ng:1.5.3'
    //Python dependencies end

      envPath = 'build/venv'
      pythonBinary = 'python3'
    }


task textAnalyticsPySetupBuild(type: PythonTask) {
    module = 'pip'
    extraArgs = ['install', 'pytest==4.6.3', 'pytest-cov==2.7.1', 'twine==1.14.0', 'flake8==3.7.8', 'wheel==0.36.2']
}

task textAnalyticsPyGenerateReqs {
    doLast {
        def newFile = new File("${project.projectDir}/pinned.txt")
        newFile.delete()
        newFile.createNewFile()
        python.modules.each { module ->
            newFile.append(module.replace(":", "==") + "\n")
        }
    }
}

task textAnalyticsPySetupBuildProperties {
    doLast {
        def newFile = new File("${project.projectDir}/setup.properties")
        newFile.delete()
        newFile.createNewFile()
        newFile.append("[default]")
        newFile.append("\nproject_name=${project.name}")
        newFile.append("\nproject_version=${project.version}")
        newFile.append("\nproject_srcDir=${pySrcDir}")
    }
}

task textAnalyticsPyBuildWheel(type: PythonTask) {
    command = 'setup.py'
    extraArgs = ['bdist_wheel', '-d', pyDistDir, '-k']
}

task textAnalyticsPyTestPrep(type: PythonTask) {
    command = 'setup.py'
    extraArgs = ['develop']
}

task textAnalyticsPyCoverage(type: PythonTask) {
    module = 'pytest'
    extraArgs = [pyTestDir, '--cov', pySrcDir, '--cov-report=xml:'+pyXmlCoveragePath, '--cov-report=html:'+pyHtmlCoveragePath, '--cov-report=term']
}

task textAnalyticsClean {
    doLast {
        exec {
            commandLine 'rm', '-rf', 'build'
        }
    }
}

task textAnalyticsPyPublishArtifacts(type: PythonTask) {
    doFirst {
        def taasArtifactoryUsername = "${taasArtifactoryUsername}"
        def taasArtifactoryPassword = "${taasArtifactoryPassword}"
        module = 'twine'
        extraArgs = ['upload', '--repository-url', whiPypiRepositoryUrl, '-u', taasArtifactoryUsername, '-p', taasArtifactoryPassword, pyDistDir+'/*.whl']
    }
}

task textAnalyticsPyFlake8(type: PythonTask) {
    module = 'flake8'
    extraArgs = [pySrcDir]
}

docker {
     copySpec.from(".").into(".").include("pinned.txt", "setup.py", "setup.properties", "text_analytics/**")
     name dockerUser + "/nlp-insights:" + version
     dockerfile file('Dockerfile')
}

dockerPush {}

dockerRun {
    name 'nlp-insights'
    image dockerUser + '/nlp-insights:' + version
    ports '5000:5000'
}

task build {}
task test {}
task coverage {}
task uploadArchives {}
task flake8 {}
task clean {}

project.tasks.textAnalyticsPyTestPrep.dependsOn project.tasks.textAnalyticsPySetupBuildProperties
project.tasks.textAnalyticsPyCoverage.dependsOn project.tasks.textAnalyticsPySetupBuild
project.tasks.textAnalyticsPyCoverage.dependsOn project.tasks.textAnalyticsPyTestPrep
project.tasks.textAnalyticsPyPublishArtifacts.dependsOn project.tasks.textAnalyticsPySetupBuild
project.tasks.textAnalyticsPyFlake8.dependsOn project.tasks.textAnalyticsPySetupBuild

project.tasks.build.dependsOn project.tasks.textAnalyticsPySetupBuild
project.tasks.build.dependsOn project.tasks.textAnalyticsPySetupBuildProperties
project.tasks.build.dependsOn project.tasks.textAnalyticsPyGenerateReqs
project.tasks.build.finalizedBy project.tasks.textAnalyticsPyBuildWheel

project.tasks.coverage.finalizedBy project.tasks.textAnalyticsPyCoverage
project.tasks.clean.finalizedBy project.tasks.textAnalyticsClean
project.tasks.uploadArchives.finalizedBy project.tasks.textAnalyticsPyPublishArtifacts
project.tasks.flake8.finalizedBy project.tasks.textAnalyticsPyFlake8

