plugins {
    id "ru.vyarus.use-python" version "2.3.0"
    id "org.sonarqube" version "3.0"
    id "com.palantir.docker" version "0.27.0"
    id 'com.palantir.docker-run' version "0.27.0"
}

group = ''
description = """NLP Insights"""

sonarqube {
    properties {
        property "sonar.sources", pySrcDir
        property "sonar.tests", pyTestDir
        property "sonar.python.coverage.reportPaths", pyXmlCoveragePath
        property "sonar.python.xunit.reportPath", pyTestReportPath
    }
}

// --------
//Python Build Section
python {
    //Python dependencies start
    pip 'ibm-whcs-sdk:1.9.0'
    pip 'ibm-cloud-sdk-core:3.8.0'
    pip 'fhir.resources:6.1.0'
    pip 'deepdiff:5.5.0'
    pip 'flask:2.0.1'
    pip 'jsonpath-ng:1.5.3'
    //Python dependencies end

      envPath = 'build/venv'
      pythonBinary = 'python3'
    }


task textAnalyticsPySetupBuild(type: PythonTask) {
    module = 'pip'
    extraArgs = ['install', 'pytest==4.6.3', 'pytest-cov==2.7.1', 'twine==1.14.0', 'deepdiff==5.5.0', 'flake8==3.7.8', 'types-requests==2.25.9', 'wheel==0.36.2']
}

task textAnalyticsPyGenerateReqs {
    outputs.file(layout.buildDirectory.file('pinned.txt')).withPropertyName("pinned")
    
    doLast {
        def pinned_text = new StringBuilder()
        python.modules.each { module ->
            pinned_text.append(module.replace(":", "==") + "\n")
        }
        outputs.files.singleFile.text = pinned_text.toString()
        println("pinned.txt:\n" + outputs.files.singleFile.text.toString())
    }
}

task textAnalyticsPySetupBuildProperties {
    inputs.property 'projectName', project.name
    inputs.property 'projectVersion', project.version
    inputs.property 'pySrcDir', pySrcDir
    outputs.file(layout.buildDirectory.file('setup.properties')).withPropertyName("setup")
    
    doLast {
        outputs.files.singleFile.text = """[default]
                                        |project_name=${inputs.properties['projectName']}
                                        |project_version=${inputs.properties['projectVersion']}
                                        |project_srcDir=${inputs.properties['pySrcDir']}
        """.stripMargin()
        println("setup.properties:\n" + outputs.files.singleFile.text.toString())
    }
}

task textAnalyticsPyBuildWheel(type: PythonTask) {
    workDir = "${project.buildDir}"
    command = "setup.py"
    extraArgs = ['bdist_wheel', '-d', pyDistDir, '-k']
}

task textAnalyticsPyTestPrep(type: PythonTask) {
    workDir = "${project.buildDir}"
    command = '${buildDir}/setup.py'
    extraArgs = ['develop']
}

task textAnalyticsPyCoverage(type: PythonTask) {
    workDir = "${project.buildDir}"
    module = 'pytest'
    extraArgs = [pyTestDir, '--cov', pySrcDir, '--cov-report=xml:'+pyXmlCoveragePath, '--cov-report=html:'+pyHtmlCoveragePath, '--cov-report=term']
}

task textAnalyticsClean {
    doLast {
        exec {
            commandLine 'rm', '-rf', 'build'
        }
    }
}

task textAnalyticsPyPublishArtifacts(type: PythonTask) {
    doFirst {
        def taasArtifactoryUsername = "${taasArtifactoryUsername}"
        def taasArtifactoryPassword = "${taasArtifactoryPassword}"
        module = 'twine'
        extraArgs = ['upload', '--repository-url', whiPypiRepositoryUrl, '-u', taasArtifactoryUsername, '-p', taasArtifactoryPassword, pyDistDir+'/*.whl']
    }
}

task textAnalyticsPyFlake8(type: PythonTask) {
    workDir = "${project.buildDir}"
    module = 'flake8'
    extraArgs = [pySrcDir]
}


task copySource(type: Copy) {
  from("src/main/py") {
    include "**/*.py"
  }
  into "${project.buildDir}/src/main/py"
}

task copyRootPy(type: Copy) {
  from('.') {
    include '*.py'
  }
  into "${project.buildDir}"
}

task build {
  dependsOn project.tasks.copySource
  dependsOn project.tasks.copyRootPy
}

docker {
     dependsOn project.tasks.build

     copySpec.from("${project.buildDir}").into(".").include(
     "setup.py", 
     textAnalyticsPySetupBuildProperties.outputs.files.singleFile.name,
     textAnalyticsPyGenerateReqs.outputs.files.singleFile.name,
     "src/main/py/text_analytics/**")
     
     name dockerUser + "/nlp-insights:" + version
     
     dockerfile file('Dockerfile')
}

dockerPush {}

dockerRun {
    name 'nlp-insights'
    image dockerUser + '/nlp-insights:' + version
    ports "${dockerLocalPort}:5000"
}

task test {}
task coverage {}
task uploadArchives {}
task flake8 {}
task clean {}

dockerPrepare.dependsOn project.tasks.build
project.tasks.textAnalyticsPyTestPrep.dependsOn project.tasks.textAnalyticsPySetupBuildProperties
project.tasks.textAnalyticsPyCoverage.dependsOn project.tasks.textAnalyticsPySetupBuild
project.tasks.textAnalyticsPyCoverage.dependsOn project.tasks.textAnalyticsPyTestPrep
project.tasks.textAnalyticsPyPublishArtifacts.dependsOn project.tasks.textAnalyticsPySetupBuild
project.tasks.textAnalyticsPyFlake8.dependsOn project.tasks.textAnalyticsPySetupBuild

project.tasks.build.dependsOn project.tasks.textAnalyticsPySetupBuild
project.tasks.build.dependsOn project.tasks.textAnalyticsPySetupBuildProperties
project.tasks.build.dependsOn project.tasks.textAnalyticsPyGenerateReqs
project.tasks.build.finalizedBy project.tasks.textAnalyticsPyBuildWheel

project.tasks.coverage.finalizedBy project.tasks.textAnalyticsPyCoverage
project.tasks.clean.finalizedBy project.tasks.textAnalyticsClean
project.tasks.uploadArchives.finalizedBy project.tasks.textAnalyticsPyPublishArtifacts
project.tasks.flake8.finalizedBy project.tasks.textAnalyticsPyFlake8
